<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-2.5.xsd   
        http://www.springframework.org/schema/context   
        http://www.springframework.org/schema/context/spring-context-2.5.xsd"
       default-autowire="byName">
    <!-- 资源目的地（队列）-->
    <bean id="queueSourceDest" class="org.apache.activemq.command.ActiveMQQueue">
        <!-- 设置消息队列的名字 -->
        <constructor-arg index="0" value="q.cloud.source" />
    </bean>
    <!-- 题目目的地（队列）-->
    <bean id="queueQuestionDest" class="org.apache.activemq.command.ActiveMQQueue">
        <!-- 设置消息队列的名字 -->
        <constructor-arg index="0" value="q.cloud.question" />
    </bean>
    <!-- 试卷目的地（队列）-->
    <bean id="queuePaperDest" class="org.apache.activemq.command.ActiveMQQueue">
        <!-- 设置消息队列的名字 -->
        <constructor-arg index="0" value="q.cloud.paper" />
    </bean>
    <!--题目：队列生产者-->
    <bean id="producerQuestionService" class="com.koolearn.cloud.queue.ProducerQuestionServiceImpl">
        <property name="jmsTemplate" ref="questionJmsTemplate" />
        <property name="destination" ref="queueQuestionDest" />
    </bean>
    <!--题目：消费者-->
    <bean id="consumerQuestionMessageListener"
          class="com.koolearn.cloud.queue.ConsumerQuestionMessageListener">
    </bean>
    <!--资源：队列生产者-->
    <bean id="producerSourceService" class="com.koolearn.cloud.queue.ProducerSourceServiceImpl">
        <property name="jmsTemplate" ref="jmsQueueTemplate" />
        <property name="destination" ref="queueSourceDest" />
    </bean>
    <!--资源：消费者-->
    <bean id="consumerSourceMessageListener"
          class="com.koolearn.cloud.queue.ConsumerSourceMessageListener">
    </bean>
    <!--试卷：队列生产者-->
    <bean id="producerPaperService" class="com.koolearn.cloud.queue.ProducerPaperServiceImpl">
        <property name="jmsTemplate" ref="jmsQueueTemplate" />
        <property name="destination" ref="queuePaperDest" />
    </bean>
    <!--试卷：消费者-->
    <bean id="consumerPaperMessageListener"
          class="com.koolearn.cloud.queue.ConsumerPaperMessageListener">
    </bean>
    <!--资源队列：消费者监听容器，这只是一个demo，需要由具体业务来实现-->
    <bean id="myMsgQueuelistenerContainer"
          class="org.springframework.jms.listener.DefaultMessageListenerContainer">
        <!--连接工厂（池）-->
        <property name="connectionFactory" ref="jmsFactory" />
        <!--queue队列名-->
        <property name="destination" ref="queueSourceDest" />
        <!--queue消费者-->
        <property name="messageListener" ref="consumerSourceMessageListener" />
        <!--接受超时时间（单位毫秒）-->
        <property name="receiveTimeout" value="10000" />
    </bean>

    <!-- 资源队列：配置QueueJms模板  -->
    <bean id="jmsQueueTemplate"
          class="org.springframework.jms.core.JmsTemplate">
        <property name="connectionFactory" ref="jmsFactory" />
        <property name="defaultDestination" ref="queueSourceDest" />
        <property name="receiveTimeout" value="10000" />
        <property name="deliveryMode" value="1" />
    </bean>

    <!--题目队列：索引消费者监听容器，这只是一个demo，需要由具体业务来实现-->
    <bean id="questionIndexlistenerContainer"
          class="org.springframework.jms.listener.DefaultMessageListenerContainer">
        <!--连接工厂（池）-->
        <property name="connectionFactory" ref="jmsFactory" />
        <!--queue队列名-->
        <property name="destination" ref="queueQuestionDest" />
        <!--queue消费者-->
        <property name="messageListener" ref="consumerQuestionMessageListener" />
        <!--接受超时时间（单位毫秒）-->
        <property name="receiveTimeout" value="10000" />
    </bean>
    <!--题目队列： 索引配置QueueJms模板  -->
    <bean id="questionJmsTemplate"
          class="org.springframework.jms.core.JmsTemplate">
        <property name="connectionFactory" ref="jmsFactory" />
        <property name="defaultDestination" ref="queueQuestionDest" />
        <property name="receiveTimeout" value="10000" />
        <property name="deliveryMode" value="1" />
    </bean>
    <!--题目队列：索引消费者监听容器，这只是一个demo，需要由具体业务来实现-->
    <bean id="paperIndexlistenerContainer"
          class="org.springframework.jms.listener.DefaultMessageListenerContainer">
        <!--连接工厂（池）-->
        <property name="connectionFactory" ref="jmsFactory" />
        <!--queue队列名-->
        <property name="destination" ref="queuePaperDest" />
        <!--queue消费者-->
        <property name="messageListener" ref="consumerPaperMessageListener" />
        <!--接受超时时间（单位毫秒）-->
        <property name="receiveTimeout" value="10000" />
    </bean>
    <!--题目队列： 索引配置QueueJms模板  -->
    <bean id="paperJmsTemplate"
          class="org.springframework.jms.core.JmsTemplate">
        <property name="connectionFactory" ref="jmsFactory" />
        <property name="defaultDestination" ref="queuePaperDest" />
        <property name="receiveTimeout" value="10000" />
        <property name="deliveryMode" value="1" />
    </bean>
    <!--连接池-->
    <bean id="jmsFactory" class="org.apache.activemq.pool.PooledConnectionFactory"
          destroy-method="stop">
        <!--连接工厂-->
        <property name="connectionFactory">
            <bean class="com.koolearn.framework.activemq.KooActiveMQConnectionFactory">
                <property name="brokerURL">
                    <value></value>
                </property>
            </bean>
        </property>
        <property name="maxConnections" value="3"></property>
    </bean>
</beans>
